// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  sensorPayload: (where?: SensorPayloadWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  sensorPayload: (
    where: SensorPayloadWhereUniqueInput
  ) => SensorPayloadNullablePromise;
  sensorPayloads: (args?: {
    where?: SensorPayloadWhereInput;
    orderBy?: SensorPayloadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SensorPayload>;
  sensorPayloadsConnection: (args?: {
    where?: SensorPayloadWhereInput;
    orderBy?: SensorPayloadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SensorPayloadConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSensorPayload: (data: SensorPayloadCreateInput) => SensorPayloadPromise;
  updateSensorPayload: (args: {
    data: SensorPayloadUpdateInput;
    where: SensorPayloadWhereUniqueInput;
  }) => SensorPayloadPromise;
  updateManySensorPayloads: (args: {
    data: SensorPayloadUpdateManyMutationInput;
    where?: SensorPayloadWhereInput;
  }) => BatchPayloadPromise;
  upsertSensorPayload: (args: {
    where: SensorPayloadWhereUniqueInput;
    create: SensorPayloadCreateInput;
    update: SensorPayloadUpdateInput;
  }) => SensorPayloadPromise;
  deleteSensorPayload: (
    where: SensorPayloadWhereUniqueInput
  ) => SensorPayloadPromise;
  deleteManySensorPayloads: (
    where?: SensorPayloadWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  sensorPayload: (
    where?: SensorPayloadSubscriptionWhereInput
  ) => SensorPayloadSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SensorPayloadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "deviceId_ASC"
  | "deviceId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "accuracy_ASC"
  | "accuracy_DESC"
  | "altitude_ASC"
  | "altitude_DESC"
  | "fixQuality_ASC"
  | "fixQuality_DESC"
  | "velocity_ASC"
  | "velocity_DESC"
  | "usingCellularLocation_ASC"
  | "usingCellularLocation_DESC"
  | "motionTriggered_ASC"
  | "motionTriggered_DESC"
  | "satellites_ASC"
  | "satellites_DESC"
  | "batteryVoltage_ASC"
  | "batteryVoltage_DESC"
  | "batteryPercentCharge_ASC"
  | "batteryPercentCharge_DESC"
  | "batteryAlert_ASC"
  | "batteryAlert_DESC"
  | "cellSignalStrength_ASC"
  | "cellSignalStrength_DESC"
  | "cellQuality_ASC"
  | "cellQuality_DESC"
  | "temperatureF_ASC"
  | "temperatureF_DESC"
  | "rangeInInches_ASC"
  | "rangeInInches_DESC"
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC"
  | "z_ASC"
  | "z_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SensorPayloadWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  deviceId?: Maybe<String>;
  deviceId_not?: Maybe<String>;
  deviceId_in?: Maybe<String[] | String>;
  deviceId_not_in?: Maybe<String[] | String>;
  deviceId_lt?: Maybe<String>;
  deviceId_lte?: Maybe<String>;
  deviceId_gt?: Maybe<String>;
  deviceId_gte?: Maybe<String>;
  deviceId_contains?: Maybe<String>;
  deviceId_not_contains?: Maybe<String>;
  deviceId_starts_with?: Maybe<String>;
  deviceId_not_starts_with?: Maybe<String>;
  deviceId_ends_with?: Maybe<String>;
  deviceId_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  timestamp?: Maybe<DateTimeInput>;
  timestamp_not?: Maybe<DateTimeInput>;
  timestamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_lt?: Maybe<DateTimeInput>;
  timestamp_lte?: Maybe<DateTimeInput>;
  timestamp_gt?: Maybe<DateTimeInput>;
  timestamp_gte?: Maybe<DateTimeInput>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  accuracy?: Maybe<Int>;
  accuracy_not?: Maybe<Int>;
  accuracy_in?: Maybe<Int[] | Int>;
  accuracy_not_in?: Maybe<Int[] | Int>;
  accuracy_lt?: Maybe<Int>;
  accuracy_lte?: Maybe<Int>;
  accuracy_gt?: Maybe<Int>;
  accuracy_gte?: Maybe<Int>;
  altitude?: Maybe<Int>;
  altitude_not?: Maybe<Int>;
  altitude_in?: Maybe<Int[] | Int>;
  altitude_not_in?: Maybe<Int[] | Int>;
  altitude_lt?: Maybe<Int>;
  altitude_lte?: Maybe<Int>;
  altitude_gt?: Maybe<Int>;
  altitude_gte?: Maybe<Int>;
  fixQuality?: Maybe<Int>;
  fixQuality_not?: Maybe<Int>;
  fixQuality_in?: Maybe<Int[] | Int>;
  fixQuality_not_in?: Maybe<Int[] | Int>;
  fixQuality_lt?: Maybe<Int>;
  fixQuality_lte?: Maybe<Int>;
  fixQuality_gt?: Maybe<Int>;
  fixQuality_gte?: Maybe<Int>;
  velocity?: Maybe<Int>;
  velocity_not?: Maybe<Int>;
  velocity_in?: Maybe<Int[] | Int>;
  velocity_not_in?: Maybe<Int[] | Int>;
  velocity_lt?: Maybe<Int>;
  velocity_lte?: Maybe<Int>;
  velocity_gt?: Maybe<Int>;
  velocity_gte?: Maybe<Int>;
  usingCellularLocation?: Maybe<Int>;
  usingCellularLocation_not?: Maybe<Int>;
  usingCellularLocation_in?: Maybe<Int[] | Int>;
  usingCellularLocation_not_in?: Maybe<Int[] | Int>;
  usingCellularLocation_lt?: Maybe<Int>;
  usingCellularLocation_lte?: Maybe<Int>;
  usingCellularLocation_gt?: Maybe<Int>;
  usingCellularLocation_gte?: Maybe<Int>;
  motionTriggered?: Maybe<Int>;
  motionTriggered_not?: Maybe<Int>;
  motionTriggered_in?: Maybe<Int[] | Int>;
  motionTriggered_not_in?: Maybe<Int[] | Int>;
  motionTriggered_lt?: Maybe<Int>;
  motionTriggered_lte?: Maybe<Int>;
  motionTriggered_gt?: Maybe<Int>;
  motionTriggered_gte?: Maybe<Int>;
  satellites?: Maybe<Int>;
  satellites_not?: Maybe<Int>;
  satellites_in?: Maybe<Int[] | Int>;
  satellites_not_in?: Maybe<Int[] | Int>;
  satellites_lt?: Maybe<Int>;
  satellites_lte?: Maybe<Int>;
  satellites_gt?: Maybe<Int>;
  satellites_gte?: Maybe<Int>;
  batteryVoltage?: Maybe<Float>;
  batteryVoltage_not?: Maybe<Float>;
  batteryVoltage_in?: Maybe<Float[] | Float>;
  batteryVoltage_not_in?: Maybe<Float[] | Float>;
  batteryVoltage_lt?: Maybe<Float>;
  batteryVoltage_lte?: Maybe<Float>;
  batteryVoltage_gt?: Maybe<Float>;
  batteryVoltage_gte?: Maybe<Float>;
  batteryPercentCharge?: Maybe<Float>;
  batteryPercentCharge_not?: Maybe<Float>;
  batteryPercentCharge_in?: Maybe<Float[] | Float>;
  batteryPercentCharge_not_in?: Maybe<Float[] | Float>;
  batteryPercentCharge_lt?: Maybe<Float>;
  batteryPercentCharge_lte?: Maybe<Float>;
  batteryPercentCharge_gt?: Maybe<Float>;
  batteryPercentCharge_gte?: Maybe<Float>;
  batteryAlert?: Maybe<Int>;
  batteryAlert_not?: Maybe<Int>;
  batteryAlert_in?: Maybe<Int[] | Int>;
  batteryAlert_not_in?: Maybe<Int[] | Int>;
  batteryAlert_lt?: Maybe<Int>;
  batteryAlert_lte?: Maybe<Int>;
  batteryAlert_gt?: Maybe<Int>;
  batteryAlert_gte?: Maybe<Int>;
  cellSignalStrength?: Maybe<Int>;
  cellSignalStrength_not?: Maybe<Int>;
  cellSignalStrength_in?: Maybe<Int[] | Int>;
  cellSignalStrength_not_in?: Maybe<Int[] | Int>;
  cellSignalStrength_lt?: Maybe<Int>;
  cellSignalStrength_lte?: Maybe<Int>;
  cellSignalStrength_gt?: Maybe<Int>;
  cellSignalStrength_gte?: Maybe<Int>;
  cellQuality?: Maybe<Int>;
  cellQuality_not?: Maybe<Int>;
  cellQuality_in?: Maybe<Int[] | Int>;
  cellQuality_not_in?: Maybe<Int[] | Int>;
  cellQuality_lt?: Maybe<Int>;
  cellQuality_lte?: Maybe<Int>;
  cellQuality_gt?: Maybe<Int>;
  cellQuality_gte?: Maybe<Int>;
  temperatureF?: Maybe<Float>;
  temperatureF_not?: Maybe<Float>;
  temperatureF_in?: Maybe<Float[] | Float>;
  temperatureF_not_in?: Maybe<Float[] | Float>;
  temperatureF_lt?: Maybe<Float>;
  temperatureF_lte?: Maybe<Float>;
  temperatureF_gt?: Maybe<Float>;
  temperatureF_gte?: Maybe<Float>;
  rangeInInches?: Maybe<Int>;
  rangeInInches_not?: Maybe<Int>;
  rangeInInches_in?: Maybe<Int[] | Int>;
  rangeInInches_not_in?: Maybe<Int[] | Int>;
  rangeInInches_lt?: Maybe<Int>;
  rangeInInches_lte?: Maybe<Int>;
  rangeInInches_gt?: Maybe<Int>;
  rangeInInches_gte?: Maybe<Int>;
  x?: Maybe<Int>;
  x_not?: Maybe<Int>;
  x_in?: Maybe<Int[] | Int>;
  x_not_in?: Maybe<Int[] | Int>;
  x_lt?: Maybe<Int>;
  x_lte?: Maybe<Int>;
  x_gt?: Maybe<Int>;
  x_gte?: Maybe<Int>;
  y?: Maybe<Int>;
  y_not?: Maybe<Int>;
  y_in?: Maybe<Int[] | Int>;
  y_not_in?: Maybe<Int[] | Int>;
  y_lt?: Maybe<Int>;
  y_lte?: Maybe<Int>;
  y_gt?: Maybe<Int>;
  y_gte?: Maybe<Int>;
  z?: Maybe<Int>;
  z_not?: Maybe<Int>;
  z_in?: Maybe<Int[] | Int>;
  z_not_in?: Maybe<Int[] | Int>;
  z_lt?: Maybe<Int>;
  z_lte?: Maybe<Int>;
  z_gt?: Maybe<Int>;
  z_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SensorPayloadWhereInput[] | SensorPayloadWhereInput>;
  OR?: Maybe<SensorPayloadWhereInput[] | SensorPayloadWhereInput>;
  NOT?: Maybe<SensorPayloadWhereInput[] | SensorPayloadWhereInput>;
}

export interface SensorPayloadCreateInput {
  id?: Maybe<ID_Input>;
  deviceId?: Maybe<String>;
  type: String;
  timestamp?: Maybe<DateTimeInput>;
  latitude: Float;
  longitude: Float;
  accuracy: Int;
  altitude: Int;
  fixQuality: Int;
  velocity: Int;
  usingCellularLocation: Int;
  motionTriggered: Int;
  satellites: Int;
  batteryVoltage: Float;
  batteryPercentCharge: Float;
  batteryAlert: Int;
  cellSignalStrength: Int;
  cellQuality: Int;
  temperatureF: Float;
  rangeInInches: Int;
  x: Int;
  y: Int;
  z: Int;
}

export interface SensorPayloadUpdateInput {
  deviceId?: Maybe<String>;
  type?: Maybe<String>;
  timestamp?: Maybe<DateTimeInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  accuracy?: Maybe<Int>;
  altitude?: Maybe<Int>;
  fixQuality?: Maybe<Int>;
  velocity?: Maybe<Int>;
  usingCellularLocation?: Maybe<Int>;
  motionTriggered?: Maybe<Int>;
  satellites?: Maybe<Int>;
  batteryVoltage?: Maybe<Float>;
  batteryPercentCharge?: Maybe<Float>;
  batteryAlert?: Maybe<Int>;
  cellSignalStrength?: Maybe<Int>;
  cellQuality?: Maybe<Int>;
  temperatureF?: Maybe<Float>;
  rangeInInches?: Maybe<Int>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  z?: Maybe<Int>;
}

export interface SensorPayloadUpdateManyMutationInput {
  deviceId?: Maybe<String>;
  type?: Maybe<String>;
  timestamp?: Maybe<DateTimeInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  accuracy?: Maybe<Int>;
  altitude?: Maybe<Int>;
  fixQuality?: Maybe<Int>;
  velocity?: Maybe<Int>;
  usingCellularLocation?: Maybe<Int>;
  motionTriggered?: Maybe<Int>;
  satellites?: Maybe<Int>;
  batteryVoltage?: Maybe<Float>;
  batteryPercentCharge?: Maybe<Float>;
  batteryAlert?: Maybe<Int>;
  cellSignalStrength?: Maybe<Int>;
  cellQuality?: Maybe<Int>;
  temperatureF?: Maybe<Float>;
  rangeInInches?: Maybe<Int>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  z?: Maybe<Int>;
}

export interface SensorPayloadSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SensorPayloadWhereInput>;
  AND?: Maybe<
    SensorPayloadSubscriptionWhereInput[] | SensorPayloadSubscriptionWhereInput
  >;
  OR?: Maybe<
    SensorPayloadSubscriptionWhereInput[] | SensorPayloadSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SensorPayloadSubscriptionWhereInput[] | SensorPayloadSubscriptionWhereInput
  >;
}

export type SensorPayloadWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface SensorPayloadEdge {
  node: SensorPayload;
  cursor: String;
}

export interface SensorPayloadEdgePromise
  extends Promise<SensorPayloadEdge>,
    Fragmentable {
  node: <T = SensorPayloadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SensorPayloadEdgeSubscription
  extends Promise<AsyncIterator<SensorPayloadEdge>>,
    Fragmentable {
  node: <T = SensorPayloadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SensorPayloadPreviousValues {
  id: ID_Output;
  deviceId?: String;
  type: String;
  timestamp?: DateTimeOutput;
  latitude: Float;
  longitude: Float;
  accuracy: Int;
  altitude: Int;
  fixQuality: Int;
  velocity: Int;
  usingCellularLocation: Int;
  motionTriggered: Int;
  satellites: Int;
  batteryVoltage: Float;
  batteryPercentCharge: Float;
  batteryAlert: Int;
  cellSignalStrength: Int;
  cellQuality: Int;
  temperatureF: Float;
  rangeInInches: Int;
  x: Int;
  y: Int;
  z: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SensorPayloadPreviousValuesPromise
  extends Promise<SensorPayloadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deviceId: () => Promise<String>;
  type: () => Promise<String>;
  timestamp: () => Promise<DateTimeOutput>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  accuracy: () => Promise<Int>;
  altitude: () => Promise<Int>;
  fixQuality: () => Promise<Int>;
  velocity: () => Promise<Int>;
  usingCellularLocation: () => Promise<Int>;
  motionTriggered: () => Promise<Int>;
  satellites: () => Promise<Int>;
  batteryVoltage: () => Promise<Float>;
  batteryPercentCharge: () => Promise<Float>;
  batteryAlert: () => Promise<Int>;
  cellSignalStrength: () => Promise<Int>;
  cellQuality: () => Promise<Int>;
  temperatureF: () => Promise<Float>;
  rangeInInches: () => Promise<Int>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  z: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SensorPayloadPreviousValuesSubscription
  extends Promise<AsyncIterator<SensorPayloadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deviceId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  accuracy: () => Promise<AsyncIterator<Int>>;
  altitude: () => Promise<AsyncIterator<Int>>;
  fixQuality: () => Promise<AsyncIterator<Int>>;
  velocity: () => Promise<AsyncIterator<Int>>;
  usingCellularLocation: () => Promise<AsyncIterator<Int>>;
  motionTriggered: () => Promise<AsyncIterator<Int>>;
  satellites: () => Promise<AsyncIterator<Int>>;
  batteryVoltage: () => Promise<AsyncIterator<Float>>;
  batteryPercentCharge: () => Promise<AsyncIterator<Float>>;
  batteryAlert: () => Promise<AsyncIterator<Int>>;
  cellSignalStrength: () => Promise<AsyncIterator<Int>>;
  cellQuality: () => Promise<AsyncIterator<Int>>;
  temperatureF: () => Promise<AsyncIterator<Float>>;
  rangeInInches: () => Promise<AsyncIterator<Int>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  z: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSensorPayload {
  count: Int;
}

export interface AggregateSensorPayloadPromise
  extends Promise<AggregateSensorPayload>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSensorPayloadSubscription
  extends Promise<AsyncIterator<AggregateSensorPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SensorPayload {
  id: ID_Output;
  deviceId?: String;
  type: String;
  timestamp?: DateTimeOutput;
  latitude: Float;
  longitude: Float;
  accuracy: Int;
  altitude: Int;
  fixQuality: Int;
  velocity: Int;
  usingCellularLocation: Int;
  motionTriggered: Int;
  satellites: Int;
  batteryVoltage: Float;
  batteryPercentCharge: Float;
  batteryAlert: Int;
  cellSignalStrength: Int;
  cellQuality: Int;
  temperatureF: Float;
  rangeInInches: Int;
  x: Int;
  y: Int;
  z: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SensorPayloadPromise
  extends Promise<SensorPayload>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deviceId: () => Promise<String>;
  type: () => Promise<String>;
  timestamp: () => Promise<DateTimeOutput>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  accuracy: () => Promise<Int>;
  altitude: () => Promise<Int>;
  fixQuality: () => Promise<Int>;
  velocity: () => Promise<Int>;
  usingCellularLocation: () => Promise<Int>;
  motionTriggered: () => Promise<Int>;
  satellites: () => Promise<Int>;
  batteryVoltage: () => Promise<Float>;
  batteryPercentCharge: () => Promise<Float>;
  batteryAlert: () => Promise<Int>;
  cellSignalStrength: () => Promise<Int>;
  cellQuality: () => Promise<Int>;
  temperatureF: () => Promise<Float>;
  rangeInInches: () => Promise<Int>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  z: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SensorPayloadSubscription
  extends Promise<AsyncIterator<SensorPayload>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deviceId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  accuracy: () => Promise<AsyncIterator<Int>>;
  altitude: () => Promise<AsyncIterator<Int>>;
  fixQuality: () => Promise<AsyncIterator<Int>>;
  velocity: () => Promise<AsyncIterator<Int>>;
  usingCellularLocation: () => Promise<AsyncIterator<Int>>;
  motionTriggered: () => Promise<AsyncIterator<Int>>;
  satellites: () => Promise<AsyncIterator<Int>>;
  batteryVoltage: () => Promise<AsyncIterator<Float>>;
  batteryPercentCharge: () => Promise<AsyncIterator<Float>>;
  batteryAlert: () => Promise<AsyncIterator<Int>>;
  cellSignalStrength: () => Promise<AsyncIterator<Int>>;
  cellQuality: () => Promise<AsyncIterator<Int>>;
  temperatureF: () => Promise<AsyncIterator<Float>>;
  rangeInInches: () => Promise<AsyncIterator<Int>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  z: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SensorPayloadNullablePromise
  extends Promise<SensorPayload | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deviceId: () => Promise<String>;
  type: () => Promise<String>;
  timestamp: () => Promise<DateTimeOutput>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  accuracy: () => Promise<Int>;
  altitude: () => Promise<Int>;
  fixQuality: () => Promise<Int>;
  velocity: () => Promise<Int>;
  usingCellularLocation: () => Promise<Int>;
  motionTriggered: () => Promise<Int>;
  satellites: () => Promise<Int>;
  batteryVoltage: () => Promise<Float>;
  batteryPercentCharge: () => Promise<Float>;
  batteryAlert: () => Promise<Int>;
  cellSignalStrength: () => Promise<Int>;
  cellQuality: () => Promise<Int>;
  temperatureF: () => Promise<Float>;
  rangeInInches: () => Promise<Int>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  z: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SensorPayloadSubscriptionPayload {
  mutation: MutationType;
  node: SensorPayload;
  updatedFields: String[];
  previousValues: SensorPayloadPreviousValues;
}

export interface SensorPayloadSubscriptionPayloadPromise
  extends Promise<SensorPayloadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SensorPayloadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SensorPayloadPreviousValuesPromise>() => T;
}

export interface SensorPayloadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SensorPayloadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SensorPayloadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SensorPayloadPreviousValuesSubscription>() => T;
}

export interface SensorPayloadConnection {
  pageInfo: PageInfo;
  edges: SensorPayloadEdge[];
}

export interface SensorPayloadConnectionPromise
  extends Promise<SensorPayloadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SensorPayloadEdge>>() => T;
  aggregate: <T = AggregateSensorPayloadPromise>() => T;
}

export interface SensorPayloadConnectionSubscription
  extends Promise<AsyncIterator<SensorPayloadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SensorPayloadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSensorPayloadSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "SensorPayload",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
